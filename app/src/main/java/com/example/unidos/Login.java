package com.example.unidos;
//changeq
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;
import android.content.Intent;
import android.os.Bundle;
import android.text.InputFilter;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;
import com.example.unidos.databinding.ActivityMainBinding;
import com.google.android.material.textfield.TextInputLayout;

public class Login extends AppCompatActivity {
    ProgressBar progressBar;
    TextInputLayout curp ;
    private Messages msg = new Messages();

    @Override
    protected void onCreate(Bundle savedInstanceState) { // when the activity is started
        super.onCreate(savedInstanceState);
        /** The autogenerated class LoginBinding
         * is bound with the layout activity_main. **/
        ActivityMainBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_main);

        PersistentData pd = new PersistentData(this);
        pd.checkExistence();

        /** An instance of the class LoginViewModel
         * which will be bound to the activity_main layout **/
        final LoginViewModel loginViewModel = ViewModelProvider.AndroidViewModelFactory.getInstance(this.getApplication()).create(LoginViewModel.class);
        /** To indicate which is the ViewModel of the Binding class **/
        binding.setViewmodel(loginViewModel);
        /** This class will be owner of "binding". **/
        binding.setLifecycleOwner(this);

        /** we'll be observing and waiting for the
         * layout component CURP changes. **/
        loginViewModel.logCURP.observe(this, new Observer<String>() {
            @Override
            /** On change the system will execute the method validData
               on LoginViewModel class */
            public void onChanged(String s) {
                curp.getEditText().setFilters(new InputFilter[]{new InputFilter.AllCaps()});
                 Log.d("--->", s);
                /** validData is in charge of field validations **/
                loginViewModel.validData();
            }
        });

        /** LoginViewModel set a value to the variable logCURPError
         * in order to send an error message under the field CURP */
        loginViewModel.logCURPError.observe(this, new Observer<String>() {
            @Override
            /** The set value is obtained **/
            public void onChanged(String s) {
                /** A reference to the EditText CURP **/
                curp= findViewById(R.id.TilCurp);
                /** the error must be enable in order to display the message. **/
                curp.setErrorEnabled(true);

                /** If-else sequence to identify the error type. **/
                if (s.equals("emptyField")){
                    /** Set the error message under the field
                     * according to the error which was identify */
                    curp.setError(msg.findMessage("empty"));
                } else if(s.equals("wrongSyntax"))
                    /** Messages is a class which contains every possible
                     * message to display before an extraordinary system event. */
                    curp.setError(msg.findMessage("noCURPmatch"));
                else if(s.equals("match")){
                    curp.setErrorEnabled(false);
                }
            }
        });

        /** Will observe the log petition status / value
         * of the user through the LiveData variable btLogin */
        loginViewModel.btLogin.observe(this, new Observer<String>() {
            @Override
            /** Detect the change in the btLogin variable, get the value and execute an action. **/
            public void onChanged(String s) {
                /** Identify the progressBar. **/
                progressBar = findViewById(R.id.progress_circular);
                /** Lets check the action to execute. **/
                switch (s){
                    case "showProgressBar":
                        progressBar.setVisibility(View.VISIBLE);
                        /** LoginViewModel needs the cobtext of this class
                         * to check the internet connection a
                         * nd store the CURP. */
                        loginViewModel.setContext(Login.this);
                        break;
                    case "success":
                        /** In case Firebase has identified the CURP. **/
                        progressBar.setVisibility(View.GONE);
                        /** Save the CURP to stay log every time
                         * the user execute the app. **/
                        loginViewModel.savePersistentData(getApplicationContext());

                        break;
                    case "operationFailed": // If an error occur during the search.
                        /** Display an error message. **/
                        showMessage(msg.findMessage("fail"));
                        break;
                    case "hasInternet": // <----------------------------------------
                        Toast.makeText(getApplicationContext(), "EstÃ¡s conectado a internet.", Toast.LENGTH_LONG).show();
                        break;
                    case "hasntInternet":
                        /** In case the Internet connection has problems **/
                        showMessage(msg.findMessage("badConn"));
                        break;
                    case "noConnected":
                        /** The phone is not connected to Internet **/
                        showMessage(msg.findMessage("noConn"));
                        break;
                    case "userNotFound":
                        /** The CURP couldn't be indentified **/
                        showMessage(msg.findMessage("noUsr"));
                }
            }
        });

        loginViewModel.btNewAcc.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(Boolean aBoolean) {
                if (aBoolean){
                    Intent newAccountIntent = new Intent(getApplicationContext(), NewAccount.class);
                    startActivity(newAccountIntent);
                }
            }
        });
    }

    /** Hide progress bar and show toast message **/
    public void showMessage(String message){
        progressBar.setVisibility(View.GONE);
        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
    }
}